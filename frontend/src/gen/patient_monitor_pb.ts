// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file patient_monitor.proto (package monitoring, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message monitoring.VitalRequest
 */
export class VitalRequest extends Message<VitalRequest> {
  /**
   * @generated from field: string patientId = 1;
   */
  patientId = "";

  constructor(data?: PartialMessage<VitalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "monitoring.VitalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "patientId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VitalRequest {
    return new VitalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VitalRequest {
    return new VitalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VitalRequest {
    return new VitalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VitalRequest | PlainMessage<VitalRequest> | undefined, b: VitalRequest | PlainMessage<VitalRequest> | undefined): boolean {
    return proto3.util.equals(VitalRequest, a, b);
  }
}

/**
 * @generated from message monitoring.VitalSigns
 */
export class VitalSigns extends Message<VitalSigns> {
  /**
   * @generated from field: string timestamp = 1;
   */
  timestamp = "";

  /**
   * @generated from field: double heartRate = 2;
   */
  heartRate = 0;

  /**
   * @generated from field: double spo2 = 3;
   */
  spo2 = 0;

  /**
   * @generated from field: double temperature = 4;
   */
  temperature = 0;

  constructor(data?: PartialMessage<VitalSigns>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "monitoring.VitalSigns";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "heartRate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "spo2", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "temperature", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VitalSigns {
    return new VitalSigns().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VitalSigns {
    return new VitalSigns().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VitalSigns {
    return new VitalSigns().fromJsonString(jsonString, options);
  }

  static equals(a: VitalSigns | PlainMessage<VitalSigns> | undefined, b: VitalSigns | PlainMessage<VitalSigns> | undefined): boolean {
    return proto3.util.equals(VitalSigns, a, b);
  }
}

